{
  "total_issues": 15,
  "issues": [
    {
      "file": "dataform-jaffle-shop-main9/definitions/intermediate/staging/stg_products.sqlx",
      "type": "Syntax Correction",
      "description": "The following changes were made: The Dataform SQLX code you provided is not valid due to improper syntax for the `config` section. Additionally, the usage of `{{ cents_to_dollars('price') }}` will throw an error as it is not a valid command in standard SQL.\n\nHere's the corrected code:\n\n```sqlx\nconfig {\n  type: \"table\"\n}\n\nwith source AS (\n    select * from ${ref('raw_products')}\n),\nrenamed as (\n    select\n        sku as product_id,\n        name as product_name,\n        type as product_type,\n        description as product_description,\n        price/100 as product_price,\n        case when type = 'jaffle' then true else false end as is_food_item,\n        case when type = 'beverage' then true else false end as is_drink_item\n    from source\n)\nselect * from renamed\n```\nIn the corrected code, I've changed the SQLX config from `type: \"table\"` to `config{ type: \"table\" }`. Also, the erroneous invocation `{{ cents_to_dollars('price') }}` has been replaced with a simple division operation `price/100` to convert cents to dollars. Besides, `case when` statements are used instead `coalesce` to transform `type` column into Boolean."
    },
    {
      "file": "dataform-jaffle-shop-main9/definitions/intermediate/staging/stg_orders.sqlx",
      "type": "Syntax Correction",
      "description": "The following changes were made: The provided Dataform SQLX code has a syntax error. The `date_trunc` function requires the timestamp unit ('day' in this case) to be the first argument and the timestamp to be the second. \n\nHere's the corrected code:\n\n```sqlx\nconfig {\n  type: \"table\"\n}\n\nwith\n\nsource as (\n\n    select * from ${ref('raw_orders')}\n\n),\n\nrenamed as (\n\n    select\n\n        ----------  ids\n        id as order_id,\n        store_id as location_id,\n        customer as customer_id,\n\n        ---------- numerics\n        subtotal as subtotal_cents,\n        tax_paid as tax_paid_cents,\n        order_total as order_total_cents,\n        {{ cents_to_dollars('subtotal') }} as subtotal,\n        {{ cents_to_dollars('tax_paid') }} as tax_paid,\n        {{ cents_to_dollars('order_total') }} as order_total,\n\n        ---------- timestamps\n        DATE_TRUNC('day', ordered_at) as ordered_at\n\n    from source\n\n)\n\nselect * from renamed\n```\n\nIn the original query, `DATE_TRUNC('ordered_at', 'day')` is incorrect because 'ordered_at' is a column, not a time unit. The correct expression is `DATE_TRUNC('day', ordered_at)` to truncate the 'ordered_at' timestamp down to the day."
    },
    {
      "file": "dataform-jaffle-shop-main9/definitions/intermediate/staging/stg_supplies.sqlx",
      "type": "Syntax Correction",
      "description": "The following changes were made: The SQLX code you've provided isn't quite valid - there are a couple of errors and misunderstandings. In Dataform, `dbt_utils` functions like `generate_surrogate_key` are not available by default, unlike in dbt, and there's a misuse of the `cents_to_dollars` function (which also does not exist in default setup). \n\nWe can correct it by removing the `dbt_utils.generate_surrogate_key` function and replacing the `cents_to_dollars` function with `/ 100.0` operation to convert cents to dollars.\n\nHere's the corrected version of your code:\n\n```sqlx\nconfig {\n  type: \"table\"\n}\n\nwith\n\nsource as (\n    select * from ${ref('raw_supplies')}\n),\n\nrenamed as (\n    select\n        ----------  ids\n        concat(cast(id as string), '-', cast(sku as string)) as supply_uuid,\n        id as supply_id,\n        sku as product_id,\n\n        ---------- text\n        name as supply_name,\n\n        ---------- numerics\n        cost / 100.0 as supply_cost,\n\n        ---------- booleans\n        perishable as is_perishable_supply\n\n    from source\n)\n\nselect * from renamed\n```\n\nIn the corrected version, I've replaced `generate_surrogate_key` with a combination of `concat`, `cast`, and `-` to join the `id` and `sku` into a unique `supply_uuid`. To convert the cost from cents to dollars (`cost` field assuming that it was originally in cents), I've divided it by `100.0`, replacing the non-existing `cents_to_dollars` function."
    },
    {
      "file": "dataform-jaffle-shop-main9/definitions/intermediate/staging/stg_customers.sqlx",
      "type": "Syntax Correction",
      "description": "The following changes were made: The Dataform SQLX code you provided is currently invalid. \n\nThe SQLX files in Dataform start with the JavaScript code which consists of a SQLX configuration file wrapped with ${ } that refers to interpolation expression, not individual SQL statements (i.e., with clause). Also, interpolation expressions (${...}) and JavaScript functions (`${ref('...')}`) for dataset dependencies should be placed inside `sqlx` tags.\n\nHere is the corrected code:\n\n```sqlx\nconfig {\n  type: \"table\"\n}\n\nsqlx `\nwith\nsource as (\n    select * from ${ref('raw_customers')}\n),\nrenamed as (\n    select\n        id as customer_id,\n        name as customer_name\n    from source\n)\nselect * from renamed\n`\n```\n\nThis code first defines a source using the 'raw_customers' table, then it creates a 'renamed' table where we rename the variables. Finally, it selects everything from the 'renamed' table."
    },
    {
      "file": "dataform-jaffle-shop-main9/definitions/intermediate/staging/stg_order_items.sqlx",
      "type": "Syntax Correction",
      "description": "The following changes were made: This code is invalid. There are a few syntax issues with it. The corrected version should look like this:\n\n```sqlx\nconfig {\n  type: \"table\"\n}\n\nJS_BLOCK: {\n\nwith\n\nsource as (\n\n    select * from ${ref('raw_items')}\n\n),\n\nrenamed as (\n\n    select\n\n        --  ids\n        id as order_item_id,\n        order_id,\n        sku as product_id\n\n    from source\n\n)\n\nselect * from renamed\n\n} \n```\nHere's what I've changed:\n- Added `JS_BLOCK:` after `config { type: \"table\" }`. This keyword is necessary in Dataform SQLX to specify that the SQL query starts.\n- Replaced `----------  ids` with `--  ids`. The explicit use of double dashes (`--`) is the standard way for single-line comments in SQL. It's important to use the correct commenting syntax to avoid possible errors."
    },
    {
      "file": "dataform-jaffle-shop-main9/definitions/intermediate/staging/stg_locations.sqlx",
      "type": "Syntax Correction",
      "description": "The following changes were made: Your code is almost correct, but there's a small mistake in the `DATE_TRUNC` function. The positions of the arguments should be swapped. The corrected version should look like the following:\n\n```sqlx\nconfig {\n  type: \"table\"\n}\n\nwith\n\nsource as (\n    select * from ${ref('raw_stores')}\n),\n\nrenamed as (\n    select\n        id as location_id,\n        name as location_name,\n        tax_rate,\n        DATE_TRUNC('day', opened_at) as opened_date\n    from source\n)\n\nselect * from renamed\n```\nIn the `DATE_TRUNC` function, the first argument should be the date part, i.e., 'day', and the second one should be the timestamp column on which truncation should be performed, i.e., 'opened_at'."
    },
    {
      "file": "dataform-jaffle-shop-main9/definitions/intermediate/staging/.ipynb_checkpoints/stg_orders-checkpoint.sqlx",
      "type": "Syntax Correction",
      "description": "The following changes were made: The Dataform SQLX code seem to be incorrect. The main issue seems to be with the usage of `DATE_TRUNC` function. DATE_TRUNC function's argument order is reversed. It should be `DATE_TRUNC('day', ordered_at)`. Also, the usage of `cents_to_dollars` JavaScript function inside SQL context looks suspicious if they are JavaScript functions.\n\nHere is the corrected code:\n\n```sqlx\nconfig {\n  type: \"table\"\n}\n\nwith\n\nsource as (\n\n    select * from ${ref('raw_orders')}\n\n),\n\nrenamed as (\n\n    select\n\n        ----------  ids\n        id as order_id,\n        store_id as location_id,\n        customer as customer_id,\n\n        ---------- numerics\n        subtotal as subtotal_cents,\n        tax_paid as tax_paid_cents,\n        order_total as order_total_cents,\n\n        ---------- use SQL to convert cents to dollars\n        subtotal/100 as subtotal,\n        tax_paid/100 as tax_paid,\n        order_total/100 as order_total,\n\n        ---------- timestamps\n        DATE_TRUNC('day', ordered_at) as ordered_at\n\n    from source\n\n)\n\nselect * from renamed\n```\n\nThis code fix assumes that `cents_to_dollars` was meant to convert cents to dollars by dividing by 100. If there are complex transformations in `cents_to_dollars`, then you need to replace the division operation with SQL equivalent transformation.\n\nAlso it fixes the `DATE_TRUNC` function argument order."
    },
    {
      "file": "dataform-jaffle-shop-main9/definitions/intermediate/staging/.ipynb_checkpoints/stg_order_items-checkpoint.sqlx",
      "type": "Syntax Correction",
      "description": "The following changes were made: The code you provided is valid. There is no need to make adjustments. Therefore, the original code stands as:\n\n```sqlx\nconfig {\n  type: \"table\"\n}\n\nwith\n\nsource as (\n\n    select * from ${ref('raw_items')}\n\n),\n\nrenamed as (\n\n    select\n\n        ----------  ids\n        id as order_item_id,\n        order_id,\n        sku as product_id\n\n    from source\n\n)\n\nselect * from renamed\n```\nThis code is essentially creating a new table, aliasing some IDs in interstitial steps (source and renamed), and the final select statement is pulling everything from the renamed step."
    },
    {
      "file": "dataform-jaffle-shop-main9/definitions/output/marts/metricflow_time_spine.sqlx",
      "type": "Syntax Correction",
      "description": "The following changes were made: The provided Dataform SQLX code is almost correct. There is only one small issue. \n\nIn Dataform, you should use `dataform` instead of `dbt_date` when calling functions. Also, `n_dateparts` and `datepart` need to be inside the `generate_series` argument in JavaScript form, not as arguments to get_base_dates directly.\n\nHere is the corrected code:\n\n```sqlx\nconfig {\n  type: \"table\"\n}\n\n-- metricflow_time_spine.sql\nwith\n\ndays as (\n\n    --for BQ adapters use \"DATE('01/01/2000','mm/dd/yyyy')\"\n    {{ dataform.coding_utils.generate_series({ \n      n_dateparts: 365*10,\n      datepart: \"day\"\n    }) }}\n\n),\n\ncast_to_date as (\n\n    select cast(date_day as date) as date_day\n\n    from days\n\n)\n\nselect * from cast_to_date\n```\n\nPlease note that the function `generate_series` will only work for the bigquery database adapter with Dataform."
    },
    {
      "file": "dataform-jaffle-shop-main9/definitions/output/marts/supplies.sqlx",
      "type": "Syntax Correction",
      "description": "The following changes were made: The provided Dataform SQLX code is valid. Hence, no changes are necessary. \n\nHere it is for reference:\n\n```sqlx\nconfig {\n  type: \"table\"\n}\n\nwith supplies as (\n    select * from ${ref('stg_supplies')}\n)\n\nselect * from supplies\n```\nThis code is creating a new table with the same data as the 'stg_supplies' table."
    },
    {
      "file": "dataform-jaffle-shop-main9/definitions/output/marts/orders.sqlx",
      "type": "Syntax Correction",
      "description": "The following changes were made: The given SQLX code provided is missing mandatory Javascript closure brackets `{}` which encapsulates the code. Usually, if a file ends with \".sqlx\", Dataform treats all of the content inside it as SQL. Javascript can be included in the SQL by wrapping it inside backtick quoted `${}` blocks. \n\nHere is the corrected code:\n\n```sqlx\nconfig {\n  type: \"table\"\n}\n\nwith\n\norders as (\n    \n    select * from ${ref('stg_orders')}\n    \n),\n\norder_items as (\n    \n    select * from ${ref('order_items')}\n    \n),\n\norder_items_summary as (\n    \n    select\n        order_id,\n        \n        sum(supply_cost) as order_cost,\n        sum(product_price) as order_items_subtotal,\n        count(order_item_id) as count_order_items,\n        sum(\n            case\n                when is_food_item then 1\n                else 0\n            end\n        ) as count_food_items,\n        sum(\n            case\n                when is_drink_item then 1\n                else 0\n            end\n        ) as count_drink_items\n    \n    from order_items\n    \n    group by 1\n\n),\n\ncompute_booleans as (\n\n    select\n        orders.*,\n        \n        order_items_summary.order_cost,\n        order_items_summary.order_items_subtotal,\n        order_items_summary.count_food_items,\n        order_items_summary.count_drink_items,\n        order_items_summary.count_order_items,\n        order_items_summary.count_food_items > 0 as is_food_order,\n        order_items_summary.count_drink_items > 0 as is_drink_order\n\n    from orders\n\n    left join\n        order_items_summary\n        on orders.order_id = order_items_summary.order_id\n    \n),\n\ncustomer_order_count as (\n    \n    select\n        *,\n        \n        row_number() over (\n            partition by customer_id\n            order by ordered_at asc\n        ) as customer_order_number\n\n    from compute_booleans\n\n)\n\nselect * from customer_order_count\n```\n\nPlease verify if the `order_items` table is supposed to be referenced directly or via another `stg_*` type reference similar to `stg_orders` in the first subquery. You may need to adjust `${ref('order_items')}` to your correct table reference."
    },
    {
      "file": "dataform-jaffle-shop-main9/definitions/output/marts/products.sqlx",
      "type": "Syntax Correction",
      "description": "The following changes were made: The given Dataform SQLX code is valid. Here is the same code for reference:\n\n```sqlx\nconfig {\n  type: \"table\"\n}\n\nwith products as (\n    \n    select * from ${ref('stg_products')}\n\n)\n\nselect * from products\n```\n\nThe \"ref\" function is used to correctly reference another dataset in your project. No correction is needed."
    },
    {
      "file": "dataform-jaffle-shop-main9/definitions/output/marts/order_items.sqlx",
      "type": "Syntax Correction",
      "description": "The following changes were made: Your code is almost valid. However, the `config` section should be closed with braces `{}`. Here is the corrected code:\n\n```sqlx\nconfig {\n  type: \"table\"\n}\n\nwith order_items as (\n    select * from ${ref('stg_order_items')}\n),\n\norders as (\n    select * from ${ref('stg_orders')}\n),\n\nproducts as (\n    select * from ${ref('stg_products')}\n),\n\nsupplies as (\n    select * from ${ref('stg_supplies')}\n),\n\norder_supplies_summary as (\n    select\n        product_id,\n        sum(supply_cost) as supply_cost\n    from supplies\n\n    group by 1\n\n),\n\njoined as (\n    select\n        order_items.*,\n\n        orders.ordered_at,\n\n        products.product_name,\n        products.product_price,\n        products.is_food_item,\n        products.is_drink_item,\n\n        order_supplies_summary.supply_cost\n\n    from order_items\n\n    left join orders on order_items.order_id = orders.order_id\n\n    left join products on order_items.product_id = products.product_id\n\n    left join order_supplies_summary\n        on order_items.product_id = order_supplies_summary.product_id\n\n)\n\nselect * from joined\n```\nAs you can see, I've not made much of a change to your original code, except for placing balanced brackets around the `config` section. In any JavaScript Object Notation (JSON) syntax, brackets are always used in pair to enclose the contents of the object."
    },
    {
      "file": "dataform-jaffle-shop-main9/definitions/output/marts/locations.sqlx",
      "type": "Syntax Correction",
      "description": "The following changes were made: The provided Dataform SQLX code appears to be valid. However, typically the `config` block is placed at the end of the script according to Dataform's recommended best practices. Here is the same code, adjusted to follow the recommended structure:\n\n```sqlx\nwith locations as (\n    select * from ${ref('stg_locations')}\n)\n\nselect * from locations\n\nconfig {\n  type: \"table\"\n}\n```\n\nYou're also missing the syntax declaration at the start. The recommended structure is as follows:\n\n```sqlx\njs {\n\n    }\n\nwith locations as (\n    select * from ${ref('stg_locations')}\n)\n\nselect * from locations\n\nconfig {\n  type: \"table\"\n}\n```"
    },
    {
      "file": "dataform-jaffle-shop-main9/definitions/output/marts/customers.sqlx",
      "type": "Syntax Correction",
      "description": "The following changes were made: The SQLX code you posted is valid. There is no need for modifications in it. So, the same code is:\n\n```sqlx\nconfig {\n  type: \"table\"\n}\n\nwith\n\ncustomers as (\n\n    select * from ${ref('stg_customers')}\n\n),\n\norders as (\n\n    select * from ${ref('orders')}\n\n),\n\ncustomer_orders_summary as (\n\n    select\n        orders.customer_id,\n\n        count(distinct orders.order_id) as count_lifetime_orders,\n        (count(distinct orders.order_id) > 1) as is_repeat_buyer,\n        min(orders.ordered_at) as first_ordered_at,\n        max(orders.ordered_at) as last_ordered_at,\n        sum(orders.subtotal) as lifetime_spend_pretax,\n        sum(orders.tax_paid) as lifetime_tax_paid,\n        sum(orders.order_total) as lifetime_spend\n\n    from orders\n\n    group by 1\n\n),\n\njoined as (\n\n    select\n        customers.*,\n\n        customer_orders_summary.count_lifetime_orders,\n        customer_orders_summary.first_ordered_at,\n        customer_orders_summary.last_ordered_at,\n        customer_orders_summary.lifetime_spend_pretax,\n        customer_orders_summary.lifetime_tax_paid,\n        customer_orders_summary.lifetime_spend,\n\n        case\n            when customer_orders_summary.is_repeat_buyer then 'returning'\n            else 'new'\n        end as customer_type\n\n    from customers\n\n    left join customer_orders_summary\n        on customers.customer_id = customer_orders_summary.customer_id\n\n)\n\nselect * from joined\n```\nPlease note that while the code is syntactically correct, the actual validity will also depend on the table structure and data. For best practices, try to avoid `select *` and specify the columns that you need."
    }
  ]
}