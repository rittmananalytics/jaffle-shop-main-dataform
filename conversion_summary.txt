Dataform Conversion Summary
===========================

Total issues found: 15

Issues that need attention:

File: dataform-jaffle-shop-main9/definitions/intermediate/staging/stg_products.sqlx
Type: Syntax Correction
Description: The following changes were made: The Dataform SQLX code you provided is not valid due to improper syntax for the `config` section. Additionally, the usage of `{{ cents_to_dollars('price') }}` will throw an error as it is not a valid command in standard SQL.

Here's the corrected code:

```sqlx
config {
  type: "table"
}

with source AS (
    select * from ${ref('raw_products')}
),
renamed as (
    select
        sku as product_id,
        name as product_name,
        type as product_type,
        description as product_description,
        price/100 as product_price,
        case when type = 'jaffle' then true else false end as is_food_item,
        case when type = 'beverage' then true else false end as is_drink_item
    from source
)
select * from renamed
```
In the corrected code, I've changed the SQLX config from `type: "table"` to `config{ type: "table" }`. Also, the erroneous invocation `{{ cents_to_dollars('price') }}` has been replaced with a simple division operation `price/100` to convert cents to dollars. Besides, `case when` statements are used instead `coalesce` to transform `type` column into Boolean.

File: dataform-jaffle-shop-main9/definitions/intermediate/staging/stg_orders.sqlx
Type: Syntax Correction
Description: The following changes were made: The provided Dataform SQLX code has a syntax error. The `date_trunc` function requires the timestamp unit ('day' in this case) to be the first argument and the timestamp to be the second. 

Here's the corrected code:

```sqlx
config {
  type: "table"
}

with

source as (

    select * from ${ref('raw_orders')}

),

renamed as (

    select

        ----------  ids
        id as order_id,
        store_id as location_id,
        customer as customer_id,

        ---------- numerics
        subtotal as subtotal_cents,
        tax_paid as tax_paid_cents,
        order_total as order_total_cents,
        {{ cents_to_dollars('subtotal') }} as subtotal,
        {{ cents_to_dollars('tax_paid') }} as tax_paid,
        {{ cents_to_dollars('order_total') }} as order_total,

        ---------- timestamps
        DATE_TRUNC('day', ordered_at) as ordered_at

    from source

)

select * from renamed
```

In the original query, `DATE_TRUNC('ordered_at', 'day')` is incorrect because 'ordered_at' is a column, not a time unit. The correct expression is `DATE_TRUNC('day', ordered_at)` to truncate the 'ordered_at' timestamp down to the day.

File: dataform-jaffle-shop-main9/definitions/intermediate/staging/stg_supplies.sqlx
Type: Syntax Correction
Description: The following changes were made: The SQLX code you've provided isn't quite valid - there are a couple of errors and misunderstandings. In Dataform, `dbt_utils` functions like `generate_surrogate_key` are not available by default, unlike in dbt, and there's a misuse of the `cents_to_dollars` function (which also does not exist in default setup). 

We can correct it by removing the `dbt_utils.generate_surrogate_key` function and replacing the `cents_to_dollars` function with `/ 100.0` operation to convert cents to dollars.

Here's the corrected version of your code:

```sqlx
config {
  type: "table"
}

with

source as (
    select * from ${ref('raw_supplies')}
),

renamed as (
    select
        ----------  ids
        concat(cast(id as string), '-', cast(sku as string)) as supply_uuid,
        id as supply_id,
        sku as product_id,

        ---------- text
        name as supply_name,

        ---------- numerics
        cost / 100.0 as supply_cost,

        ---------- booleans
        perishable as is_perishable_supply

    from source
)

select * from renamed
```

In the corrected version, I've replaced `generate_surrogate_key` with a combination of `concat`, `cast`, and `-` to join the `id` and `sku` into a unique `supply_uuid`. To convert the cost from cents to dollars (`cost` field assuming that it was originally in cents), I've divided it by `100.0`, replacing the non-existing `cents_to_dollars` function.

File: dataform-jaffle-shop-main9/definitions/intermediate/staging/stg_customers.sqlx
Type: Syntax Correction
Description: The following changes were made: The Dataform SQLX code you provided is currently invalid. 

The SQLX files in Dataform start with the JavaScript code which consists of a SQLX configuration file wrapped with ${ } that refers to interpolation expression, not individual SQL statements (i.e., with clause). Also, interpolation expressions (${...}) and JavaScript functions (`${ref('...')}`) for dataset dependencies should be placed inside `sqlx` tags.

Here is the corrected code:

```sqlx
config {
  type: "table"
}

sqlx `
with
source as (
    select * from ${ref('raw_customers')}
),
renamed as (
    select
        id as customer_id,
        name as customer_name
    from source
)
select * from renamed
`
```

This code first defines a source using the 'raw_customers' table, then it creates a 'renamed' table where we rename the variables. Finally, it selects everything from the 'renamed' table.

File: dataform-jaffle-shop-main9/definitions/intermediate/staging/stg_order_items.sqlx
Type: Syntax Correction
Description: The following changes were made: This code is invalid. There are a few syntax issues with it. The corrected version should look like this:

```sqlx
config {
  type: "table"
}

JS_BLOCK: {

with

source as (

    select * from ${ref('raw_items')}

),

renamed as (

    select

        --  ids
        id as order_item_id,
        order_id,
        sku as product_id

    from source

)

select * from renamed

} 
```
Here's what I've changed:
- Added `JS_BLOCK:` after `config { type: "table" }`. This keyword is necessary in Dataform SQLX to specify that the SQL query starts.
- Replaced `----------  ids` with `--  ids`. The explicit use of double dashes (`--`) is the standard way for single-line comments in SQL. It's important to use the correct commenting syntax to avoid possible errors.

File: dataform-jaffle-shop-main9/definitions/intermediate/staging/stg_locations.sqlx
Type: Syntax Correction
Description: The following changes were made: Your code is almost correct, but there's a small mistake in the `DATE_TRUNC` function. The positions of the arguments should be swapped. The corrected version should look like the following:

```sqlx
config {
  type: "table"
}

with

source as (
    select * from ${ref('raw_stores')}
),

renamed as (
    select
        id as location_id,
        name as location_name,
        tax_rate,
        DATE_TRUNC('day', opened_at) as opened_date
    from source
)

select * from renamed
```
In the `DATE_TRUNC` function, the first argument should be the date part, i.e., 'day', and the second one should be the timestamp column on which truncation should be performed, i.e., 'opened_at'.

File: dataform-jaffle-shop-main9/definitions/intermediate/staging/.ipynb_checkpoints/stg_orders-checkpoint.sqlx
Type: Syntax Correction
Description: The following changes were made: The Dataform SQLX code seem to be incorrect. The main issue seems to be with the usage of `DATE_TRUNC` function. DATE_TRUNC function's argument order is reversed. It should be `DATE_TRUNC('day', ordered_at)`. Also, the usage of `cents_to_dollars` JavaScript function inside SQL context looks suspicious if they are JavaScript functions.

Here is the corrected code:

```sqlx
config {
  type: "table"
}

with

source as (

    select * from ${ref('raw_orders')}

),

renamed as (

    select

        ----------  ids
        id as order_id,
        store_id as location_id,
        customer as customer_id,

        ---------- numerics
        subtotal as subtotal_cents,
        tax_paid as tax_paid_cents,
        order_total as order_total_cents,

        ---------- use SQL to convert cents to dollars
        subtotal/100 as subtotal,
        tax_paid/100 as tax_paid,
        order_total/100 as order_total,

        ---------- timestamps
        DATE_TRUNC('day', ordered_at) as ordered_at

    from source

)

select * from renamed
```

This code fix assumes that `cents_to_dollars` was meant to convert cents to dollars by dividing by 100. If there are complex transformations in `cents_to_dollars`, then you need to replace the division operation with SQL equivalent transformation.

Also it fixes the `DATE_TRUNC` function argument order.

File: dataform-jaffle-shop-main9/definitions/intermediate/staging/.ipynb_checkpoints/stg_order_items-checkpoint.sqlx
Type: Syntax Correction
Description: The following changes were made: The code you provided is valid. There is no need to make adjustments. Therefore, the original code stands as:

```sqlx
config {
  type: "table"
}

with

source as (

    select * from ${ref('raw_items')}

),

renamed as (

    select

        ----------  ids
        id as order_item_id,
        order_id,
        sku as product_id

    from source

)

select * from renamed
```
This code is essentially creating a new table, aliasing some IDs in interstitial steps (source and renamed), and the final select statement is pulling everything from the renamed step.

File: dataform-jaffle-shop-main9/definitions/output/marts/metricflow_time_spine.sqlx
Type: Syntax Correction
Description: The following changes were made: The provided Dataform SQLX code is almost correct. There is only one small issue. 

In Dataform, you should use `dataform` instead of `dbt_date` when calling functions. Also, `n_dateparts` and `datepart` need to be inside the `generate_series` argument in JavaScript form, not as arguments to get_base_dates directly.

Here is the corrected code:

```sqlx
config {
  type: "table"
}

-- metricflow_time_spine.sql
with

days as (

    --for BQ adapters use "DATE('01/01/2000','mm/dd/yyyy')"
    {{ dataform.coding_utils.generate_series({ 
      n_dateparts: 365*10,
      datepart: "day"
    }) }}

),

cast_to_date as (

    select cast(date_day as date) as date_day

    from days

)

select * from cast_to_date
```

Please note that the function `generate_series` will only work for the bigquery database adapter with Dataform.

File: dataform-jaffle-shop-main9/definitions/output/marts/supplies.sqlx
Type: Syntax Correction
Description: The following changes were made: The provided Dataform SQLX code is valid. Hence, no changes are necessary. 

Here it is for reference:

```sqlx
config {
  type: "table"
}

with supplies as (
    select * from ${ref('stg_supplies')}
)

select * from supplies
```
This code is creating a new table with the same data as the 'stg_supplies' table.

File: dataform-jaffle-shop-main9/definitions/output/marts/orders.sqlx
Type: Syntax Correction
Description: The following changes were made: The given SQLX code provided is missing mandatory Javascript closure brackets `{}` which encapsulates the code. Usually, if a file ends with ".sqlx", Dataform treats all of the content inside it as SQL. Javascript can be included in the SQL by wrapping it inside backtick quoted `${}` blocks. 

Here is the corrected code:

```sqlx
config {
  type: "table"
}

with

orders as (
    
    select * from ${ref('stg_orders')}
    
),

order_items as (
    
    select * from ${ref('order_items')}
    
),

order_items_summary as (
    
    select
        order_id,
        
        sum(supply_cost) as order_cost,
        sum(product_price) as order_items_subtotal,
        count(order_item_id) as count_order_items,
        sum(
            case
                when is_food_item then 1
                else 0
            end
        ) as count_food_items,
        sum(
            case
                when is_drink_item then 1
                else 0
            end
        ) as count_drink_items
    
    from order_items
    
    group by 1

),

compute_booleans as (

    select
        orders.*,
        
        order_items_summary.order_cost,
        order_items_summary.order_items_subtotal,
        order_items_summary.count_food_items,
        order_items_summary.count_drink_items,
        order_items_summary.count_order_items,
        order_items_summary.count_food_items > 0 as is_food_order,
        order_items_summary.count_drink_items > 0 as is_drink_order

    from orders

    left join
        order_items_summary
        on orders.order_id = order_items_summary.order_id
    
),

customer_order_count as (
    
    select
        *,
        
        row_number() over (
            partition by customer_id
            order by ordered_at asc
        ) as customer_order_number

    from compute_booleans

)

select * from customer_order_count
```

Please verify if the `order_items` table is supposed to be referenced directly or via another `stg_*` type reference similar to `stg_orders` in the first subquery. You may need to adjust `${ref('order_items')}` to your correct table reference.

File: dataform-jaffle-shop-main9/definitions/output/marts/products.sqlx
Type: Syntax Correction
Description: The following changes were made: The given Dataform SQLX code is valid. Here is the same code for reference:

```sqlx
config {
  type: "table"
}

with products as (
    
    select * from ${ref('stg_products')}

)

select * from products
```

The "ref" function is used to correctly reference another dataset in your project. No correction is needed.

File: dataform-jaffle-shop-main9/definitions/output/marts/order_items.sqlx
Type: Syntax Correction
Description: The following changes were made: Your code is almost valid. However, the `config` section should be closed with braces `{}`. Here is the corrected code:

```sqlx
config {
  type: "table"
}

with order_items as (
    select * from ${ref('stg_order_items')}
),

orders as (
    select * from ${ref('stg_orders')}
),

products as (
    select * from ${ref('stg_products')}
),

supplies as (
    select * from ${ref('stg_supplies')}
),

order_supplies_summary as (
    select
        product_id,
        sum(supply_cost) as supply_cost
    from supplies

    group by 1

),

joined as (
    select
        order_items.*,

        orders.ordered_at,

        products.product_name,
        products.product_price,
        products.is_food_item,
        products.is_drink_item,

        order_supplies_summary.supply_cost

    from order_items

    left join orders on order_items.order_id = orders.order_id

    left join products on order_items.product_id = products.product_id

    left join order_supplies_summary
        on order_items.product_id = order_supplies_summary.product_id

)

select * from joined
```
As you can see, I've not made much of a change to your original code, except for placing balanced brackets around the `config` section. In any JavaScript Object Notation (JSON) syntax, brackets are always used in pair to enclose the contents of the object.

File: dataform-jaffle-shop-main9/definitions/output/marts/locations.sqlx
Type: Syntax Correction
Description: The following changes were made: The provided Dataform SQLX code appears to be valid. However, typically the `config` block is placed at the end of the script according to Dataform's recommended best practices. Here is the same code, adjusted to follow the recommended structure:

```sqlx
with locations as (
    select * from ${ref('stg_locations')}
)

select * from locations

config {
  type: "table"
}
```

You're also missing the syntax declaration at the start. The recommended structure is as follows:

```sqlx
js {

    }

with locations as (
    select * from ${ref('stg_locations')}
)

select * from locations

config {
  type: "table"
}
```

File: dataform-jaffle-shop-main9/definitions/output/marts/customers.sqlx
Type: Syntax Correction
Description: The following changes were made: The SQLX code you posted is valid. There is no need for modifications in it. So, the same code is:

```sqlx
config {
  type: "table"
}

with

customers as (

    select * from ${ref('stg_customers')}

),

orders as (

    select * from ${ref('orders')}

),

customer_orders_summary as (

    select
        orders.customer_id,

        count(distinct orders.order_id) as count_lifetime_orders,
        (count(distinct orders.order_id) > 1) as is_repeat_buyer,
        min(orders.ordered_at) as first_ordered_at,
        max(orders.ordered_at) as last_ordered_at,
        sum(orders.subtotal) as lifetime_spend_pretax,
        sum(orders.tax_paid) as lifetime_tax_paid,
        sum(orders.order_total) as lifetime_spend

    from orders

    group by 1

),

joined as (

    select
        customers.*,

        customer_orders_summary.count_lifetime_orders,
        customer_orders_summary.first_ordered_at,
        customer_orders_summary.last_ordered_at,
        customer_orders_summary.lifetime_spend_pretax,
        customer_orders_summary.lifetime_tax_paid,
        customer_orders_summary.lifetime_spend,

        case
            when customer_orders_summary.is_repeat_buyer then 'returning'
            else 'new'
        end as customer_type

    from customers

    left join customer_orders_summary
        on customers.customer_id = customer_orders_summary.customer_id

)

select * from joined
```
Please note that while the code is syntactically correct, the actual validity will also depend on the table structure and data. For best practices, try to avoid `select *` and specify the columns that you need.
